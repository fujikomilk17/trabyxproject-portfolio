'use strict'

const fs = require('fs')
const path = require('path')
const mkdirp = require('mkdirp')
const rimraf = require('rimraf')
const tempy = require('tempy')
const installFrom = require('../src/install')
const uninstallFrom = require('../src/uninstall')

function install(rootDir, dir) {
  installFrom(path.join(rootDir, dir))
}

function uninstall(rootDir, dir) {
  uninstallFrom(path.join(rootDir, dir))
}

function mkdir(rootDir, dir) {
  mkdirp.sync(path.join(rootDir, dir))
}

function writeFile(dir, filePath, data) {
  fs.writeFileSync(path.join(dir, filePath), data)
}

function readFile(dir, filePath) {
  return fs.readFileSync(path.join(dir, filePath), 'utf-8')
}

function exists(dir, filePath) {
  return fs.existsSync(path.join(dir, filePath))
}

describe('yorkie', () => {
  let dir
  beforeEach(() => (dir = tempy.directory()))
  afterEach(() => rimraf.sync(dir))

  it('should support basic layout', () => {
    mkdir(dir, '.git/hooks')
    mkdir(dir, 'node_modules/yorkie')
    writeFile(dir, 'package.json', '{}')

    install(dir, '/node_modules/yorkie')
    const hook = readFile(dir, '.git/hooks/pre-commit')

    expect(hook).toMatch('#yorkie')
    expect(hook).toMatch('cd "."')
    expect(hook).toMatch(`node "./node_modules/yorkie/src/runner.js" pre-commit`)
    expect(hook).toMatch('--no-verify')

    const prepareCommitMsg = readFile(dir, '.git/hooks/prepare-commit-msg')
    expect(prepareCommitMsg).toMatch('cannot be bypassed')

    uninstall(dir, 'node_modules/yorkie')
    expect(exists(dir, '.git/hooks/pre-push')).toBeFalsy()
  })

  it('should not install git hooks when installed in sub directory', () => {
    mkdir(dir, '.git/hooks')
    mkdir(dir, 'A/B/node_modules/yorkie')
    writeFile(dir, 'A/B/package.json', '{}')

    install(dir, 'A/B/node_modules/yorkie')
    